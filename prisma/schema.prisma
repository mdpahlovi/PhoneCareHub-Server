generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(uuid())
    name      String
    role      Role      @default(user)
    image     String    @default("https://shorturl.at/jnruF")
    email     String    @unique
    password  String?
    phone     String?
    address   String?
    birthdate DateTime?
    gender    Gender?
    provider  Provider  @default(credentials)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    bookings  Booking[]
    reviews   Review[]

    @@map("users")
}

model Admin {
    id        String   @id @default(uuid())
    name      String
    role      Role     @default(admin)
    image     String   @default("https://shorturl.at/jnruF")
    email     String   @unique
    password  String?
    phone     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("admins")
}

model Service {
    id           String    @id @default(uuid())
    name         String
    image        String
    description  String
    estimatetime Int
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    bookings     Booking[]
    reviews      Review[]

    @@map("services")
}

model Booking {
    id          String   @id @default(uuid())
    userId      String
    serviceId   String
    deviceimage String
    devicename  String
    problem     String
    time        DateTime
    status      Status
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    service     Service  @relation(fields: [serviceId], references: [id])
    payment     Payment?

    @@map("bookings")
}

model Payment {
    id            String   @id @default(uuid())
    bookingId     String   @unique
    method        String
    amount        String
    transactionId String
    paymentDate   DateTime @default(now())
    bookings      Booking  @relation(fields: [bookingId], references: [id])

    @@map("payments")
}

model Review {
    id        String   @id @default(uuid())
    userId    String
    serviceId String
    rating    Float
    comment   String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    service   Service  @relation(fields: [serviceId], references: [id])

    @@map("reviews")
}

enum Role {
    user
    admin
    superadmin
}

enum Provider {
    google
    github
    credentials
}

enum Gender {
    male
    female
    transgender
}

enum Status {
    pending
    shipping
    ongoing
    delivered
    recived
}
